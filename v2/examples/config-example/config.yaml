# Forge v2 Extension Configuration Example
# Demonstrates the dual-key pattern for extension configuration

app:
  name: config-example
  version: 1.0.0
  port: 8080

# Namespaced pattern (preferred in v2)
# Extensions first try "extensions.{name}" key
extensions:
  cache:
    driver: redis
    url: redis://localhost:6379/0
    default_ttl: 5m
    max_size: 20000
    prefix: "myapp:"
    connection_pool_size: 20
  
  mcp:
    enabled: true
    base_path: /_/mcp
    auto_expose_routes: true
    exclude_patterns:
      - "/_/*"
      - "/internal/*"
    enable_metrics: true
    schema_cache: true

# Top-level pattern (legacy/v1 compatibility)
# Extensions fall back to "{name}" key if "extensions.{name}" not found
# Uncomment these to test fallback:
# cache:
#   driver: inmemory
#   default_ttl: 1m
#
# mcp:
#   enabled: false

# Note: Programmatic configuration always takes precedence
# If you create an extension with options like:
#   cache.NewExtension(cache.WithDriver("memcached"))
# That will override the config file setting.

